main.tf

provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIAWA7AQH7HNWB6A76R"
  secret_key = "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"
}

# # Retrieve the current environment from the workspace
# locals {
#   current_env = lookup(var.environments, terraform.workspace, {})
# }

module "my_vpc" {
  source                 = "./modules/network"
  vpc_cidr_block         = local.current_env.vpc_cidr_block
  env_prefix             = local.current_env.env_prefix
  public_subnet_cidr_block     = local.current_env.public_subnet_cidr_block
  private_subnet_cidr_block = local.current_env.private_subnet_cidr_block
  public_subnet_availability_zone = local.current_env.public_subnet_availability_zone
  private_subnet_availability_zone = local.current_env.private_subnet_availability_zone
}

module "my_instance" {
    source = "./modules/instances"
    ami_id = local.current_env.ami_id
    instance_type = local.current_env.instance_type
    subnet_id = module.my_vpc.public_subnet_id
    instance_name = local.current_env.instance_name
    vpc_id = module.my_vpc.vpc_id
    env_prefix = local.current_env.env_prefix
    private_key_path = local.current_env.private_key_path
}

---
variables.tf

variable "vpc_cidr_block" {}
variable "env_prefix" {}
variable "public_subnet_cidr_block" {}
variable "private_subnet_cidr_block" {}
variable "public_subnet_availability_zone" {}
variable "private_subnet_availability_zone" {}
variable "ami_id" {}
variable "instance_type" {}
variable "instance_name" {}
variable "private_key_path" {}

variable "environments" {
  default = {
    dev = {
      vpc_cidr_block = "10.0.0.0/16"
      env_prefix     = "dev"
      public_subnet_cidr_block = "10.0.1.0/24"
      private_subnet_cidr_block = "10.0.2.0/24"
      public_subnet_availability_zone = "ap-south-1a"
      private_subnet_availability_zone = "ap-south-1b"
      my_ip = "10.0.1.6/24"
      avail_zone = "ap-south-1a"
      instance_type = "t2.micro"
      ami_id = "ami-02e94b011299ef128"
      instance_name = "my-first-instance"
      private_key_path = ""
    },
    prod = {
      vpc_cidr_block = "10.0.0.0/16"
      env_prefix     = "prod"
      public_subnet_cidr_block = "10.0.1.0/24"
      private_subnet_cidr_block = "10.0.2.0/24"
      public_subnet_availability_zone = "ap-south-1a"
      private_subnet_availability_zone = "ap-south-1b"
      my_ip = "10.0.1.6/24"
      avail_zone = "ap-south-1a"
      instance_type = "t2.micro"
      ami_id = "ami-02e94b011299ef128"
      instance_name = "my-second-instance"
      private_key_path = ""
    }
  }
}

locals {
  current_env = lookup(var.environments, var.env_prefix, {})
}


----
terraform.tfvars

vpc_cidr_block                   = "10.0.0.0/16"
env_prefix                       = "dev"
public_subnet_cidr_block         = "10.0.1.0/24"
private_subnet_cidr_block        = "10.0.2.0/24"
public_subnet_availability_zone  = "ap-south-1a"
private_subnet_availability_zone = "ap-south-1b"

ami_id           = "ami-02e94b011299ef128" # Replace with your AMI ID
instance_type    = "t2.micro"
instance_name    = "my-third-instance"  # Replace with your instance name
private_key_path = ""

----

outputs.tf

output "vpc_id" {
  value = module.my_vpc.vpc_id
}

output "public_subnet_id" {
  value = module.my_vpc.public_subnet_id
}

output "private_subnet_id" {
  value = module.my_vpc.private_subnet_id
}


----
modules/network/main.tf

resource "aws_vpc" "my_vpc" {
  cidr_block = var.vpc_cidr_block
  tags = {
    "Name" = "${var.env_prefix}-vpc"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = var.public_subnet_cidr_block
  availability_zone = var.public_subnet_availability_zone
  map_public_ip_on_launch = true  # This attribute makes instances in this subnet publicly accessible
  tags = {
    Name = "${var.env_prefix}-public-subnet"
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = var.private_subnet_cidr_block
  availability_zone = var.private_subnet_availability_zone
  tags = {
    Name = "${var.env_prefix}-private-subnet"
  }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    Name = "${var.env_prefix}-internet-gateway"
  }
}

resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "${var.env_prefix}-public-route-table"
  }
}

resource "aws_route_table_association" "public_route_table_assoc" {
  subnet_id = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

----
modules/network/variables.tf

variable "vpc_cidr_block" {}
variable "env_prefix" {}
variable "public_subnet_cidr_block" {}
variable "private_subnet_cidr_block" {}
variable "public_subnet_availability_zone" {}
variable "private_subnet_availability_zone" {}

----
modules/network/outputs.tf

output "vpc_id" {
  value = aws_vpc.my_vpc.id
}

output "public_subnet_id" {
  value = aws_subnet.public_subnet.id
}

output "private_subnet_id" {
  value = aws_subnet.private_subnet.id
}


----
modules/instances/main.tf

resource "aws_instance" "my_instance" {
  ami           = var.ami_id
  instance_type = var.instance_type
  subnet_id     = var.subnet_id
  tags = {
    Name = var.instance_name
  }
  vpc_security_group_ids = [
    aws_security_group.my_security_group.id
  ]

  associate_public_ip_address = true

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y docker.io",  # Installing Docker
      # Additional commands for Docker setup or container deployment can be added here
    ]
  }

  connection {
    type        = "ssh"
    user        = "ec2-user" # Replace with the username for your AMI
    private_key = file(var.private_key_path) # Add the path to your private key
    host        = self.public_ip # You can use `self.public_dns` as well
  }
}

resource "aws_security_group" "my_security_group" {
  name_prefix   = "${var.env_prefix}-security-group"
  description   = "Allow traffic on specified ports"
  vpc_id        = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 2375
    to_port     = 2375
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Replace with the appropriate IP range for your MySQL server
  }

  egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
        prefix_list_ids = []
    }

  tags = {
    Name = "${var.env_prefix}-security-group"
  }
}




----
modules/instances/variables.tf

variable "ami_id" {}
variable "instance_type" {}
variable "instance_name" {}
variable "subnet_id" {}
variable "vpc_id" {}
variable "env_prefix" {}
variable "private_key_path" {}

----
modules/instances/outputs.tf

output "instance_id" {
  value = aws_instance.my_instance.id
}

output "public_ip" {
  value = aws_instance.my_instance.public_ip
}

output "private_ip" {
  value = aws_instance.my_instance.private_ip
}

----
